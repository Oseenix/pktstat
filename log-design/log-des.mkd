# 1、需求分析  

## 1.1 配置输入
        以统计“与源站交互情况”为例，当需要进行该项统计时，配置的输入信息进行关心域的指定，如dst_ip、interface，但有时并不指定域具体的内容，如dst_ip不指定具体的ip地址，需要统计模块根据实际的报文内容生成统计实例。

        这种不同于iptables一般形式的配置输入形式，可以通过添加iptables应用程序的扩展模块进行实现。
## 1.2 统计输出

        统计实例是进行呈现给用户的统计数据，是对报文根据关注域生成的分类，根据用户指定的关注域，实时生成和维护；在指定条件满足时，对应的统计实例中的数据进行层次化的输出呈现。

        如在指定关注目的ip、协议号、端口号的报文统计时，需要将报文按照不同的组合（dstip+proto+port）进行统计，当当前系统中不存在当前报文的组合（即统计实例）时，则生成该组合（统计实例）。

        多个统计实例的输出不适合按照生成顺序或其他无序次序进行输出，最好按照分层关联输出，这样的输出才不会杂乱，可以清晰明确。


        如首先输出某一目的ip下的所有所有统计实例，而同一目的ip下的统计实例输出，再首先进行同一protocol的统计实例输出，如此分层清晰。

<center>![多个conn聚合为一个统计实例](pic/test.png)  
图1 统计实例</center>

# 2、设计考虑
## 2.1 工程考虑
        实现需要考虑易于向前向后兼容和维护，实在分为应用层扩展和内核扩展。
        应用层扩展，由于iptables本身支持增加扩展模块的形式，因此代码上的前后版本兼容不会存在问题，重点需要考虑的时扩展配置是否后续的兼容性考虑。
        内核扩展，对内核代码不能进行深入细节的修改，依赖现有的架构进行简单扩展来实现统计输出功能。如果做到无缝兼容是最好，即在不同的内核版本之间使用时，只需根据内核重新编译扩展模块安装即可。但是当前的方案还做不到无缝的兼容，至少需要在内核中增加一个扩展模块的id宏定义，由于改动代码量约为一两行，因此可维护性和兼容性在可控范围之内。


## 2.2 功能实现
### 2.2.1 配置
        配置在内核中的存在形式可以以match项存在，数据结构如图1中match:dst_ip-protocol-port所示，用户曾通过扩展模块的形式传递给内核，实现可参照iptable应用源码现有扩展模块libxt_mac.c和内核xt_mac.c实现。

### 2.2.2 统计
        统计衔接配置输出，性能是重点。
    
        一般情况下，每个统计实例都会与多个连接（conntrack)关联，而各个conntrack实际上可能分布在内核庞大的hash桶中，彼此没有直接关联关系，如果仅利用现有的数据结构，为得到一个统计实例可能需要遍历hash寻找每一个匹配实例的连接累加输出，效率各方面都不允许。
    
        每个报文统计到的统计实例，通过conntrack扩展，如图1中conn_stat_ext扩展结构中的ext_list指定，即一个报文可能需要统计到多个统计实例中。
    
        而conntrack的stat_ext扩展的初始化在连接第一个报文进入系统时进行指定，因此和nat类似，统计模块对性能的影响主要在连接的第一个报文。第一个报文在进行统计实例匹配时，采用分层哈系的方式进行匹配，兼顾性能和输出组织。
    
    

### 2.2.3 输出
#### 输出触发
        输出可以通过定时器进行定时输出，进行输出时，遍历match项目中phlist链表，因为结构本身层次明确，输出容易做到层次清晰明确。
        而分层阀值判断，并不需要每个统计实例都进行判断，某一节点的统计量未到阀值，则该节点下层所有统计实例都不再需要判断。
        另一种方式是不使用定时器，采用当前报文与上次输出时间戳对比的方式，进行输出判断，这种方式有两种不利：实际上每个报文每个统计实例均在判断;输出相对混乱。
        权衡之下建议采用定时器定时输出。
        conntrack在销毁时，会调用每个ext的destory函数，因此超短时连接的报文可通过conn_stat_ext中的destory函数进行统计。
    
#### 输出形式
        输出模块可作为独立模块，可以选择多种输出方式，如终端、文件、网络，当前可只实现终端输出。尽量后续其他应用应也可复用。
